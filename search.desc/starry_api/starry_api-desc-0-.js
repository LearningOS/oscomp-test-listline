searchState.loadedDescShard("starry_api", 0, "check if a path is mounted\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMount a fatfs device\nGet file metadata by <code>fd</code> and write into <code>statbuf</code>.\nThe ioctl() system call manipulates the underlying device …\ncreate a link from new_path to old_path old_path: old file …\nGet the metadata of the symbolic link and write into <code>buf</code>.\nSleep some nanoseconds\nOpen a file by <code>filename</code> and insert it into the file …\nOpen or create a file. fd: file descriptor filename: file …\nRead data from the file indicated by <code>fd</code>.\nTo set the clear_child_tid field in the task extended data.\nGet the file metadata by <code>path</code> and write into <code>statbuf</code>.\nremove link of specific file (can be used to delete file) …\nWrite data to the file indicated by <code>fd</code>.\nunmount a fatfs device\nDirectory wrapper for <code>axfs::fops::Directory</code>.\nWrapper struct for the namespace resource [<code>FD_TABLE</code>]\nFile wrapper for <code>axfs::fops::File</code>.\nA normalized file path representation\nA global hardlink manager\nA manager for hardlinks\nError types\nAdd a file to the file descriptor table.\nReturns a string slice of the underlying path\nClose a file by <code>fd</code>.\nReturns an iterator of the path components\nReturn a copy of the inner table.\nCreate a link Returns <code>LinkError::NotFound</code> if the target …\nDereference the resource automatically, according whether …\nDereference the resource from the given namespace.\nDereference the resource from the global namespace.\nCheck if this path ends with the given suffix path\nWhether the path exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a file-like object by <code>fd</code>.\nGet a file-like object by <code>dirfd</code> and <code>path</code>.\nGet the inner node of the file.\nGet the inner node of the directory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if it’s a directory (ends with ‘/’)\nCheck if it’s a regular file (doesn’t end with ‘/’)\nCheck if it’s the root directory\nJoin this path with a relative path component\nGet the last directory entry.\nReturns the file or directory name component\nCreate a new <code>FilePath</code> from a path string, the path will be …\nReturns the parent directory path\nGet the path of the file.\nGet the path of the directory.\nRemove a link Delete the file when link count is zero or …\nCheck if this path starts with the given prefix path\nConstructs a new handle to the standard input of the …\nConstructs a new handle to the standard output of the …\nA type that can hold any kind of socket address, as a safe …\nReturns the length of the encoded sockaddr.\nGets the initialized part of the storage as bytes.\nGets the address family of this socket address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a socket address from reading from <code>ptr</code>, which …\nAn immutable pointer to user space memory.\nA pointer to user space memory.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the pointer as <code>&amp;str</code>, validating the memory region.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA measurement of the system clock.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the time elapsed since epoch (also known as …")